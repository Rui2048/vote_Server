// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voteServer_proto.proto

#ifndef PROTOBUF_INCLUDED_voteServer_5fproto_2eproto
#define PROTOBUF_INCLUDED_voteServer_5fproto_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_voteServer_5fproto_2eproto 

namespace protobuf_voteServer_5fproto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_voteServer_5fproto_2eproto
namespace protoMsg {
class CreateVote;
class CreateVoteDefaultTypeInternal;
extern CreateVoteDefaultTypeInternal _CreateVote_default_instance_;
class CreateVoteResponse;
class CreateVoteResponseDefaultTypeInternal;
extern CreateVoteResponseDefaultTypeInternal _CreateVoteResponse_default_instance_;
class CreateVote_Judge;
class CreateVote_JudgeDefaultTypeInternal;
extern CreateVote_JudgeDefaultTypeInternal _CreateVote_Judge_default_instance_;
class GetAllVotes;
class GetAllVotesDefaultTypeInternal;
extern GetAllVotesDefaultTypeInternal _GetAllVotes_default_instance_;
class GetAllVotesResponse;
class GetAllVotesResponseDefaultTypeInternal;
extern GetAllVotesResponseDefaultTypeInternal _GetAllVotesResponse_default_instance_;
class GetAllVotesResponse_Vote;
class GetAllVotesResponse_VoteDefaultTypeInternal;
extern GetAllVotesResponse_VoteDefaultTypeInternal _GetAllVotesResponse_Vote_default_instance_;
class GetVoteResult;
class GetVoteResultDefaultTypeInternal;
extern GetVoteResultDefaultTypeInternal _GetVoteResult_default_instance_;
class GetVoteResultByOneJudge;
class GetVoteResultByOneJudgeDefaultTypeInternal;
extern GetVoteResultByOneJudgeDefaultTypeInternal _GetVoteResultByOneJudge_default_instance_;
class GetVoteResultByOneJudgeResponse;
class GetVoteResultByOneJudgeResponseDefaultTypeInternal;
extern GetVoteResultByOneJudgeResponseDefaultTypeInternal _GetVoteResultByOneJudgeResponse_default_instance_;
class GetVoteResultByOneJudgeResponse_Vote;
class GetVoteResultByOneJudgeResponse_VoteDefaultTypeInternal;
extern GetVoteResultByOneJudgeResponse_VoteDefaultTypeInternal _GetVoteResultByOneJudgeResponse_Vote_default_instance_;
class LoginRequest;
class LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
class LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class Vote;
class VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class VoteResponse;
class VoteResponseDefaultTypeInternal;
extern VoteResponseDefaultTypeInternal _VoteResponse_default_instance_;
class VoteResponse_Plaerscore;
class VoteResponse_PlaerscoreDefaultTypeInternal;
extern VoteResponse_PlaerscoreDefaultTypeInternal _VoteResponse_Plaerscore_default_instance_;
class Vote_Plaer_score;
class Vote_Plaer_scoreDefaultTypeInternal;
extern Vote_Plaer_scoreDefaultTypeInternal _Vote_Plaer_score_default_instance_;
}  // namespace protoMsg
namespace google {
namespace protobuf {
template<> ::protoMsg::CreateVote* Arena::CreateMaybeMessage<::protoMsg::CreateVote>(Arena*);
template<> ::protoMsg::CreateVoteResponse* Arena::CreateMaybeMessage<::protoMsg::CreateVoteResponse>(Arena*);
template<> ::protoMsg::CreateVote_Judge* Arena::CreateMaybeMessage<::protoMsg::CreateVote_Judge>(Arena*);
template<> ::protoMsg::GetAllVotes* Arena::CreateMaybeMessage<::protoMsg::GetAllVotes>(Arena*);
template<> ::protoMsg::GetAllVotesResponse* Arena::CreateMaybeMessage<::protoMsg::GetAllVotesResponse>(Arena*);
template<> ::protoMsg::GetAllVotesResponse_Vote* Arena::CreateMaybeMessage<::protoMsg::GetAllVotesResponse_Vote>(Arena*);
template<> ::protoMsg::GetVoteResult* Arena::CreateMaybeMessage<::protoMsg::GetVoteResult>(Arena*);
template<> ::protoMsg::GetVoteResultByOneJudge* Arena::CreateMaybeMessage<::protoMsg::GetVoteResultByOneJudge>(Arena*);
template<> ::protoMsg::GetVoteResultByOneJudgeResponse* Arena::CreateMaybeMessage<::protoMsg::GetVoteResultByOneJudgeResponse>(Arena*);
template<> ::protoMsg::GetVoteResultByOneJudgeResponse_Vote* Arena::CreateMaybeMessage<::protoMsg::GetVoteResultByOneJudgeResponse_Vote>(Arena*);
template<> ::protoMsg::LoginRequest* Arena::CreateMaybeMessage<::protoMsg::LoginRequest>(Arena*);
template<> ::protoMsg::LoginResponse* Arena::CreateMaybeMessage<::protoMsg::LoginResponse>(Arena*);
template<> ::protoMsg::Vote* Arena::CreateMaybeMessage<::protoMsg::Vote>(Arena*);
template<> ::protoMsg::VoteResponse* Arena::CreateMaybeMessage<::protoMsg::VoteResponse>(Arena*);
template<> ::protoMsg::VoteResponse_Plaerscore* Arena::CreateMaybeMessage<::protoMsg::VoteResponse_Plaerscore>(Arena*);
template<> ::protoMsg::Vote_Plaer_score* Arena::CreateMaybeMessage<::protoMsg::Vote_Plaer_score>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protoMsg {

// ===================================================================

class CreateVote_Judge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.CreateVote.Judge) */ {
 public:
  CreateVote_Judge();
  virtual ~CreateVote_Judge();

  CreateVote_Judge(const CreateVote_Judge& from);

  inline CreateVote_Judge& operator=(const CreateVote_Judge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVote_Judge(CreateVote_Judge&& from) noexcept
    : CreateVote_Judge() {
    *this = ::std::move(from);
  }

  inline CreateVote_Judge& operator=(CreateVote_Judge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVote_Judge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVote_Judge* internal_default_instance() {
    return reinterpret_cast<const CreateVote_Judge*>(
               &_CreateVote_Judge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateVote_Judge* other);
  friend void swap(CreateVote_Judge& a, CreateVote_Judge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVote_Judge* New() const final {
    return CreateMaybeMessage<CreateVote_Judge>(NULL);
  }

  CreateVote_Judge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateVote_Judge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateVote_Judge& from);
  void MergeFrom(const CreateVote_Judge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVote_Judge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:protoMsg.CreateVote.Judge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.CreateVote) */ {
 public:
  CreateVote();
  virtual ~CreateVote();

  CreateVote(const CreateVote& from);

  inline CreateVote& operator=(const CreateVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVote(CreateVote&& from) noexcept
    : CreateVote() {
    *this = ::std::move(from);
  }

  inline CreateVote& operator=(CreateVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVote* internal_default_instance() {
    return reinterpret_cast<const CreateVote*>(
               &_CreateVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateVote* other);
  friend void swap(CreateVote& a, CreateVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVote* New() const final {
    return CreateMaybeMessage<CreateVote>(NULL);
  }

  CreateVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateVote& from);
  void MergeFrom(const CreateVote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateVote_Judge Judge;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.CreateVote.Judge judgeChoose = 5;
  int judgechoose_size() const;
  void clear_judgechoose();
  static const int kJudgeChooseFieldNumber = 5;
  ::protoMsg::CreateVote_Judge* mutable_judgechoose(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >*
      mutable_judgechoose();
  const ::protoMsg::CreateVote_Judge& judgechoose(int index) const;
  ::protoMsg::CreateVote_Judge* add_judgechoose();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >&
      judgechoose() const;

  // repeated string playerChoose = 6;
  int playerchoose_size() const;
  void clear_playerchoose();
  static const int kPlayerChooseFieldNumber = 6;
  const ::std::string& playerchoose(int index) const;
  ::std::string* mutable_playerchoose(int index);
  void set_playerchoose(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_playerchoose(int index, ::std::string&& value);
  #endif
  void set_playerchoose(int index, const char* value);
  void set_playerchoose(int index, const char* value, size_t size);
  ::std::string* add_playerchoose();
  void add_playerchoose(const ::std::string& value);
  #if LANG_CXX11
  void add_playerchoose(::std::string&& value);
  #endif
  void add_playerchoose(const char* value);
  void add_playerchoose(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& playerchoose() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_playerchoose();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string voteName = 2;
  void clear_votename();
  static const int kVoteNameFieldNumber = 2;
  const ::std::string& votename() const;
  void set_votename(const ::std::string& value);
  #if LANG_CXX11
  void set_votename(::std::string&& value);
  #endif
  void set_votename(const char* value);
  void set_votename(const char* value, size_t size);
  ::std::string* mutable_votename();
  ::std::string* release_votename();
  void set_allocated_votename(::std::string* votename);

  // string dazhongWeight = 3;
  void clear_dazhongweight();
  static const int kDazhongWeightFieldNumber = 3;
  const ::std::string& dazhongweight() const;
  void set_dazhongweight(const ::std::string& value);
  #if LANG_CXX11
  void set_dazhongweight(::std::string&& value);
  #endif
  void set_dazhongweight(const char* value);
  void set_dazhongweight(const char* value, size_t size);
  ::std::string* mutable_dazhongweight();
  ::std::string* release_dazhongweight();
  void set_allocated_dazhongweight(::std::string* dazhongweight);

  // string zhuanyeWeight = 4;
  void clear_zhuanyeweight();
  static const int kZhuanyeWeightFieldNumber = 4;
  const ::std::string& zhuanyeweight() const;
  void set_zhuanyeweight(const ::std::string& value);
  #if LANG_CXX11
  void set_zhuanyeweight(::std::string&& value);
  #endif
  void set_zhuanyeweight(const char* value);
  void set_zhuanyeweight(const char* value, size_t size);
  ::std::string* mutable_zhuanyeweight();
  ::std::string* release_zhuanyeweight();
  void set_allocated_zhuanyeweight(::std::string* zhuanyeweight);

  // string deadline = 7;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 7;
  const ::std::string& deadline() const;
  void set_deadline(const ::std::string& value);
  #if LANG_CXX11
  void set_deadline(::std::string&& value);
  #endif
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  ::std::string* mutable_deadline();
  ::std::string* release_deadline();
  void set_allocated_deadline(::std::string* deadline);

  // @@protoc_insertion_point(class_scope:protoMsg.CreateVote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge > judgechoose_;
  ::google::protobuf::RepeatedPtrField< ::std::string> playerchoose_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr votename_;
  ::google::protobuf::internal::ArenaStringPtr dazhongweight_;
  ::google::protobuf::internal::ArenaStringPtr zhuanyeweight_;
  ::google::protobuf::internal::ArenaStringPtr deadline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateVoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.CreateVoteResponse) */ {
 public:
  CreateVoteResponse();
  virtual ~CreateVoteResponse();

  CreateVoteResponse(const CreateVoteResponse& from);

  inline CreateVoteResponse& operator=(const CreateVoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVoteResponse(CreateVoteResponse&& from) noexcept
    : CreateVoteResponse() {
    *this = ::std::move(from);
  }

  inline CreateVoteResponse& operator=(CreateVoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVoteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateVoteResponse*>(
               &_CreateVoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateVoteResponse* other);
  friend void swap(CreateVoteResponse& a, CreateVoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVoteResponse* New() const final {
    return CreateMaybeMessage<CreateVoteResponse>(NULL);
  }

  CreateVoteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateVoteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateVoteResponse& from);
  void MergeFrom(const CreateVoteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  const ::std::string& result() const;
  void set_result(const ::std::string& value);
  #if LANG_CXX11
  void set_result(::std::string&& value);
  #endif
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  ::std::string* mutable_result();
  ::std::string* release_result();
  void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:protoMsg.CreateVoteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAllVotes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetAllVotes) */ {
 public:
  GetAllVotes();
  virtual ~GetAllVotes();

  GetAllVotes(const GetAllVotes& from);

  inline GetAllVotes& operator=(const GetAllVotes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllVotes(GetAllVotes&& from) noexcept
    : GetAllVotes() {
    *this = ::std::move(from);
  }

  inline GetAllVotes& operator=(GetAllVotes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllVotes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllVotes* internal_default_instance() {
    return reinterpret_cast<const GetAllVotes*>(
               &_GetAllVotes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetAllVotes* other);
  friend void swap(GetAllVotes& a, GetAllVotes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllVotes* New() const final {
    return CreateMaybeMessage<GetAllVotes>(NULL);
  }

  GetAllVotes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAllVotes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAllVotes& from);
  void MergeFrom(const GetAllVotes& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllVotes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:protoMsg.GetAllVotes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAllVotesResponse_Vote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetAllVotesResponse.Vote) */ {
 public:
  GetAllVotesResponse_Vote();
  virtual ~GetAllVotesResponse_Vote();

  GetAllVotesResponse_Vote(const GetAllVotesResponse_Vote& from);

  inline GetAllVotesResponse_Vote& operator=(const GetAllVotesResponse_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllVotesResponse_Vote(GetAllVotesResponse_Vote&& from) noexcept
    : GetAllVotesResponse_Vote() {
    *this = ::std::move(from);
  }

  inline GetAllVotesResponse_Vote& operator=(GetAllVotesResponse_Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllVotesResponse_Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllVotesResponse_Vote* internal_default_instance() {
    return reinterpret_cast<const GetAllVotesResponse_Vote*>(
               &_GetAllVotesResponse_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(GetAllVotesResponse_Vote* other);
  friend void swap(GetAllVotesResponse_Vote& a, GetAllVotesResponse_Vote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllVotesResponse_Vote* New() const final {
    return CreateMaybeMessage<GetAllVotesResponse_Vote>(NULL);
  }

  GetAllVotesResponse_Vote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAllVotesResponse_Vote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAllVotesResponse_Vote& from);
  void MergeFrom(const GetAllVotesResponse_Vote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllVotesResponse_Vote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string voteName = 1;
  void clear_votename();
  static const int kVoteNameFieldNumber = 1;
  const ::std::string& votename() const;
  void set_votename(const ::std::string& value);
  #if LANG_CXX11
  void set_votename(::std::string&& value);
  #endif
  void set_votename(const char* value);
  void set_votename(const char* value, size_t size);
  ::std::string* mutable_votename();
  ::std::string* release_votename();
  void set_allocated_votename(::std::string* votename);

  // string voteID = 2;
  void clear_voteid();
  static const int kVoteIDFieldNumber = 2;
  const ::std::string& voteid() const;
  void set_voteid(const ::std::string& value);
  #if LANG_CXX11
  void set_voteid(::std::string&& value);
  #endif
  void set_voteid(const char* value);
  void set_voteid(const char* value, size_t size);
  ::std::string* mutable_voteid();
  ::std::string* release_voteid();
  void set_allocated_voteid(::std::string* voteid);

  // string isValid = 3;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 3;
  const ::std::string& isvalid() const;
  void set_isvalid(const ::std::string& value);
  #if LANG_CXX11
  void set_isvalid(::std::string&& value);
  #endif
  void set_isvalid(const char* value);
  void set_isvalid(const char* value, size_t size);
  ::std::string* mutable_isvalid();
  ::std::string* release_isvalid();
  void set_allocated_isvalid(::std::string* isvalid);

  // @@protoc_insertion_point(class_scope:protoMsg.GetAllVotesResponse.Vote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr votename_;
  ::google::protobuf::internal::ArenaStringPtr voteid_;
  ::google::protobuf::internal::ArenaStringPtr isvalid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetAllVotesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetAllVotesResponse) */ {
 public:
  GetAllVotesResponse();
  virtual ~GetAllVotesResponse();

  GetAllVotesResponse(const GetAllVotesResponse& from);

  inline GetAllVotesResponse& operator=(const GetAllVotesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetAllVotesResponse(GetAllVotesResponse&& from) noexcept
    : GetAllVotesResponse() {
    *this = ::std::move(from);
  }

  inline GetAllVotesResponse& operator=(GetAllVotesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllVotesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllVotesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllVotesResponse*>(
               &_GetAllVotesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetAllVotesResponse* other);
  friend void swap(GetAllVotesResponse& a, GetAllVotesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetAllVotesResponse* New() const final {
    return CreateMaybeMessage<GetAllVotesResponse>(NULL);
  }

  GetAllVotesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetAllVotesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetAllVotesResponse& from);
  void MergeFrom(const GetAllVotesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllVotesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetAllVotesResponse_Vote Vote;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.GetAllVotesResponse.Vote votes = 1;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 1;
  ::protoMsg::GetAllVotesResponse_Vote* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::GetAllVotesResponse_Vote >*
      mutable_votes();
  const ::protoMsg::GetAllVotesResponse_Vote& votes(int index) const;
  ::protoMsg::GetAllVotesResponse_Vote* add_votes();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::GetAllVotesResponse_Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:protoMsg.GetAllVotesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::GetAllVotesResponse_Vote > votes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVoteResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetVoteResult) */ {
 public:
  GetVoteResult();
  virtual ~GetVoteResult();

  GetVoteResult(const GetVoteResult& from);

  inline GetVoteResult& operator=(const GetVoteResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVoteResult(GetVoteResult&& from) noexcept
    : GetVoteResult() {
    *this = ::std::move(from);
  }

  inline GetVoteResult& operator=(GetVoteResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVoteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVoteResult* internal_default_instance() {
    return reinterpret_cast<const GetVoteResult*>(
               &_GetVoteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetVoteResult* other);
  friend void swap(GetVoteResult& a, GetVoteResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVoteResult* New() const final {
    return CreateMaybeMessage<GetVoteResult>(NULL);
  }

  GetVoteResult* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVoteResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVoteResult& from);
  void MergeFrom(const GetVoteResult& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVoteResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string voteID = 2;
  void clear_voteid();
  static const int kVoteIDFieldNumber = 2;
  const ::std::string& voteid() const;
  void set_voteid(const ::std::string& value);
  #if LANG_CXX11
  void set_voteid(::std::string&& value);
  #endif
  void set_voteid(const char* value);
  void set_voteid(const char* value, size_t size);
  ::std::string* mutable_voteid();
  ::std::string* release_voteid();
  void set_allocated_voteid(::std::string* voteid);

  // @@protoc_insertion_point(class_scope:protoMsg.GetVoteResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr voteid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVoteResultByOneJudge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetVoteResultByOneJudge) */ {
 public:
  GetVoteResultByOneJudge();
  virtual ~GetVoteResultByOneJudge();

  GetVoteResultByOneJudge(const GetVoteResultByOneJudge& from);

  inline GetVoteResultByOneJudge& operator=(const GetVoteResultByOneJudge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVoteResultByOneJudge(GetVoteResultByOneJudge&& from) noexcept
    : GetVoteResultByOneJudge() {
    *this = ::std::move(from);
  }

  inline GetVoteResultByOneJudge& operator=(GetVoteResultByOneJudge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVoteResultByOneJudge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVoteResultByOneJudge* internal_default_instance() {
    return reinterpret_cast<const GetVoteResultByOneJudge*>(
               &_GetVoteResultByOneJudge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetVoteResultByOneJudge* other);
  friend void swap(GetVoteResultByOneJudge& a, GetVoteResultByOneJudge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVoteResultByOneJudge* New() const final {
    return CreateMaybeMessage<GetVoteResultByOneJudge>(NULL);
  }

  GetVoteResultByOneJudge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVoteResultByOneJudge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVoteResultByOneJudge& from);
  void MergeFrom(const GetVoteResultByOneJudge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVoteResultByOneJudge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string ustatus = 3;
  void clear_ustatus();
  static const int kUstatusFieldNumber = 3;
  const ::std::string& ustatus() const;
  void set_ustatus(const ::std::string& value);
  #if LANG_CXX11
  void set_ustatus(::std::string&& value);
  #endif
  void set_ustatus(const char* value);
  void set_ustatus(const char* value, size_t size);
  ::std::string* mutable_ustatus();
  ::std::string* release_ustatus();
  void set_allocated_ustatus(::std::string* ustatus);

  // @@protoc_insertion_point(class_scope:protoMsg.GetVoteResultByOneJudge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr ustatus_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVoteResultByOneJudgeResponse_Vote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetVoteResultByOneJudgeResponse.Vote) */ {
 public:
  GetVoteResultByOneJudgeResponse_Vote();
  virtual ~GetVoteResultByOneJudgeResponse_Vote();

  GetVoteResultByOneJudgeResponse_Vote(const GetVoteResultByOneJudgeResponse_Vote& from);

  inline GetVoteResultByOneJudgeResponse_Vote& operator=(const GetVoteResultByOneJudgeResponse_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVoteResultByOneJudgeResponse_Vote(GetVoteResultByOneJudgeResponse_Vote&& from) noexcept
    : GetVoteResultByOneJudgeResponse_Vote() {
    *this = ::std::move(from);
  }

  inline GetVoteResultByOneJudgeResponse_Vote& operator=(GetVoteResultByOneJudgeResponse_Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVoteResultByOneJudgeResponse_Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVoteResultByOneJudgeResponse_Vote* internal_default_instance() {
    return reinterpret_cast<const GetVoteResultByOneJudgeResponse_Vote*>(
               &_GetVoteResultByOneJudgeResponse_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetVoteResultByOneJudgeResponse_Vote* other);
  friend void swap(GetVoteResultByOneJudgeResponse_Vote& a, GetVoteResultByOneJudgeResponse_Vote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVoteResultByOneJudgeResponse_Vote* New() const final {
    return CreateMaybeMessage<GetVoteResultByOneJudgeResponse_Vote>(NULL);
  }

  GetVoteResultByOneJudgeResponse_Vote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVoteResultByOneJudgeResponse_Vote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVoteResultByOneJudgeResponse_Vote& from);
  void MergeFrom(const GetVoteResultByOneJudgeResponse_Vote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVoteResultByOneJudgeResponse_Vote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string voteName = 1;
  void clear_votename();
  static const int kVoteNameFieldNumber = 1;
  const ::std::string& votename() const;
  void set_votename(const ::std::string& value);
  #if LANG_CXX11
  void set_votename(::std::string&& value);
  #endif
  void set_votename(const char* value);
  void set_votename(const char* value, size_t size);
  ::std::string* mutable_votename();
  ::std::string* release_votename();
  void set_allocated_votename(::std::string* votename);

  // string voteID = 2;
  void clear_voteid();
  static const int kVoteIDFieldNumber = 2;
  const ::std::string& voteid() const;
  void set_voteid(const ::std::string& value);
  #if LANG_CXX11
  void set_voteid(::std::string&& value);
  #endif
  void set_voteid(const char* value);
  void set_voteid(const char* value, size_t size);
  ::std::string* mutable_voteid();
  ::std::string* release_voteid();
  void set_allocated_voteid(::std::string* voteid);

  // string isValid = 3;
  void clear_isvalid();
  static const int kIsValidFieldNumber = 3;
  const ::std::string& isvalid() const;
  void set_isvalid(const ::std::string& value);
  #if LANG_CXX11
  void set_isvalid(::std::string&& value);
  #endif
  void set_isvalid(const char* value);
  void set_isvalid(const char* value, size_t size);
  ::std::string* mutable_isvalid();
  ::std::string* release_isvalid();
  void set_allocated_isvalid(::std::string* isvalid);

  // string isVoted = 4;
  void clear_isvoted();
  static const int kIsVotedFieldNumber = 4;
  const ::std::string& isvoted() const;
  void set_isvoted(const ::std::string& value);
  #if LANG_CXX11
  void set_isvoted(::std::string&& value);
  #endif
  void set_isvoted(const char* value);
  void set_isvoted(const char* value, size_t size);
  ::std::string* mutable_isvoted();
  ::std::string* release_isvoted();
  void set_allocated_isvoted(::std::string* isvoted);

  // @@protoc_insertion_point(class_scope:protoMsg.GetVoteResultByOneJudgeResponse.Vote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr votename_;
  ::google::protobuf::internal::ArenaStringPtr voteid_;
  ::google::protobuf::internal::ArenaStringPtr isvalid_;
  ::google::protobuf::internal::ArenaStringPtr isvoted_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetVoteResultByOneJudgeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.GetVoteResultByOneJudgeResponse) */ {
 public:
  GetVoteResultByOneJudgeResponse();
  virtual ~GetVoteResultByOneJudgeResponse();

  GetVoteResultByOneJudgeResponse(const GetVoteResultByOneJudgeResponse& from);

  inline GetVoteResultByOneJudgeResponse& operator=(const GetVoteResultByOneJudgeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetVoteResultByOneJudgeResponse(GetVoteResultByOneJudgeResponse&& from) noexcept
    : GetVoteResultByOneJudgeResponse() {
    *this = ::std::move(from);
  }

  inline GetVoteResultByOneJudgeResponse& operator=(GetVoteResultByOneJudgeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVoteResultByOneJudgeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetVoteResultByOneJudgeResponse* internal_default_instance() {
    return reinterpret_cast<const GetVoteResultByOneJudgeResponse*>(
               &_GetVoteResultByOneJudgeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetVoteResultByOneJudgeResponse* other);
  friend void swap(GetVoteResultByOneJudgeResponse& a, GetVoteResultByOneJudgeResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetVoteResultByOneJudgeResponse* New() const final {
    return CreateMaybeMessage<GetVoteResultByOneJudgeResponse>(NULL);
  }

  GetVoteResultByOneJudgeResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetVoteResultByOneJudgeResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetVoteResultByOneJudgeResponse& from);
  void MergeFrom(const GetVoteResultByOneJudgeResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVoteResultByOneJudgeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetVoteResultByOneJudgeResponse_Vote Vote;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.GetVoteResultByOneJudgeResponse.Vote votes = 1;
  int votes_size() const;
  void clear_votes();
  static const int kVotesFieldNumber = 1;
  ::protoMsg::GetVoteResultByOneJudgeResponse_Vote* mutable_votes(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::GetVoteResultByOneJudgeResponse_Vote >*
      mutable_votes();
  const ::protoMsg::GetVoteResultByOneJudgeResponse_Vote& votes(int index) const;
  ::protoMsg::GetVoteResultByOneJudgeResponse_Vote* add_votes();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::GetVoteResultByOneJudgeResponse_Vote >&
      votes() const;

  // @@protoc_insertion_point(class_scope:protoMsg.GetVoteResultByOneJudgeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::GetVoteResultByOneJudgeResponse_Vote > votes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.LoginRequest) */ {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LoginRequest* other);
  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(NULL);
  }

  LoginRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string upwd = 3;
  void clear_upwd();
  static const int kUpwdFieldNumber = 3;
  const ::std::string& upwd() const;
  void set_upwd(const ::std::string& value);
  #if LANG_CXX11
  void set_upwd(::std::string&& value);
  #endif
  void set_upwd(const char* value);
  void set_upwd(const char* value, size_t size);
  ::std::string* mutable_upwd();
  ::std::string* release_upwd();
  void set_allocated_upwd(::std::string* upwd);

  // @@protoc_insertion_point(class_scope:protoMsg.LoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr upwd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.LoginResponse) */ {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(LoginResponse* other);
  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoginResponse* New() const final {
    return CreateMaybeMessage<LoginResponse>(NULL);
  }

  LoginResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string uname = 1;
  void clear_uname();
  static const int kUnameFieldNumber = 1;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:protoMsg.LoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vote_Plaer_score : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.Vote.Plaer_score) */ {
 public:
  Vote_Plaer_score();
  virtual ~Vote_Plaer_score();

  Vote_Plaer_score(const Vote_Plaer_score& from);

  inline Vote_Plaer_score& operator=(const Vote_Plaer_score& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vote_Plaer_score(Vote_Plaer_score&& from) noexcept
    : Vote_Plaer_score() {
    *this = ::std::move(from);
  }

  inline Vote_Plaer_score& operator=(Vote_Plaer_score&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vote_Plaer_score& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote_Plaer_score* internal_default_instance() {
    return reinterpret_cast<const Vote_Plaer_score*>(
               &_Vote_Plaer_score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Vote_Plaer_score* other);
  friend void swap(Vote_Plaer_score& a, Vote_Plaer_score& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vote_Plaer_score* New() const final {
    return CreateMaybeMessage<Vote_Plaer_score>(NULL);
  }

  Vote_Plaer_score* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vote_Plaer_score>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vote_Plaer_score& from);
  void MergeFrom(const Vote_Plaer_score& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote_Plaer_score* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  const ::std::string& score() const;
  void set_score(const ::std::string& value);
  #if LANG_CXX11
  void set_score(::std::string&& value);
  #endif
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  ::std::string* mutable_score();
  ::std::string* release_score();
  void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:protoMsg.Vote.Plaer_score)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.Vote) */ {
 public:
  Vote();
  virtual ~Vote();

  Vote(const Vote& from);

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(Vote* other);
  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vote* New() const final {
    return CreateMaybeMessage<Vote>(NULL);
  }

  Vote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vote_Plaer_score Plaer_score;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.Vote.Plaer_score plaerPoints = 4;
  int plaerpoints_size() const;
  void clear_plaerpoints();
  static const int kPlaerPointsFieldNumber = 4;
  ::protoMsg::Vote_Plaer_score* mutable_plaerpoints(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >*
      mutable_plaerpoints();
  const ::protoMsg::Vote_Plaer_score& plaerpoints(int index) const;
  ::protoMsg::Vote_Plaer_score* add_plaerpoints();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >&
      plaerpoints() const;

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string ustatus = 3;
  void clear_ustatus();
  static const int kUstatusFieldNumber = 3;
  const ::std::string& ustatus() const;
  void set_ustatus(const ::std::string& value);
  #if LANG_CXX11
  void set_ustatus(::std::string&& value);
  #endif
  void set_ustatus(const char* value);
  void set_ustatus(const char* value, size_t size);
  ::std::string* mutable_ustatus();
  ::std::string* release_ustatus();
  void set_allocated_ustatus(::std::string* ustatus);

  // string voteID = 5;
  void clear_voteid();
  static const int kVoteIDFieldNumber = 5;
  const ::std::string& voteid() const;
  void set_voteid(const ::std::string& value);
  #if LANG_CXX11
  void set_voteid(::std::string&& value);
  #endif
  void set_voteid(const char* value);
  void set_voteid(const char* value, size_t size);
  ::std::string* mutable_voteid();
  ::std::string* release_voteid();
  void set_allocated_voteid(::std::string* voteid);

  // @@protoc_insertion_point(class_scope:protoMsg.Vote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score > plaerpoints_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr ustatus_;
  ::google::protobuf::internal::ArenaStringPtr voteid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteResponse_Plaerscore : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.VoteResponse.Plaerscore) */ {
 public:
  VoteResponse_Plaerscore();
  virtual ~VoteResponse_Plaerscore();

  VoteResponse_Plaerscore(const VoteResponse_Plaerscore& from);

  inline VoteResponse_Plaerscore& operator=(const VoteResponse_Plaerscore& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteResponse_Plaerscore(VoteResponse_Plaerscore&& from) noexcept
    : VoteResponse_Plaerscore() {
    *this = ::std::move(from);
  }

  inline VoteResponse_Plaerscore& operator=(VoteResponse_Plaerscore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse_Plaerscore& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteResponse_Plaerscore* internal_default_instance() {
    return reinterpret_cast<const VoteResponse_Plaerscore*>(
               &_VoteResponse_Plaerscore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(VoteResponse_Plaerscore* other);
  friend void swap(VoteResponse_Plaerscore& a, VoteResponse_Plaerscore& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteResponse_Plaerscore* New() const final {
    return CreateMaybeMessage<VoteResponse_Plaerscore>(NULL);
  }

  VoteResponse_Plaerscore* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VoteResponse_Plaerscore>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VoteResponse_Plaerscore& from);
  void MergeFrom(const VoteResponse_Plaerscore& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteResponse_Plaerscore* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  const ::std::string& score() const;
  void set_score(const ::std::string& value);
  #if LANG_CXX11
  void set_score(::std::string&& value);
  #endif
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  ::std::string* mutable_score();
  ::std::string* release_score();
  void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:protoMsg.VoteResponse.Plaerscore)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VoteResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.VoteResponse) */ {
 public:
  VoteResponse();
  virtual ~VoteResponse();

  VoteResponse(const VoteResponse& from);

  inline VoteResponse& operator=(const VoteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VoteResponse(VoteResponse&& from) noexcept
    : VoteResponse() {
    *this = ::std::move(from);
  }

  inline VoteResponse& operator=(VoteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VoteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteResponse* internal_default_instance() {
    return reinterpret_cast<const VoteResponse*>(
               &_VoteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(VoteResponse* other);
  friend void swap(VoteResponse& a, VoteResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VoteResponse* New() const final {
    return CreateMaybeMessage<VoteResponse>(NULL);
  }

  VoteResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VoteResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VoteResponse& from);
  void MergeFrom(const VoteResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VoteResponse_Plaerscore Plaerscore;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.VoteResponse.Plaerscore playerScores = 1;
  int playerscores_size() const;
  void clear_playerscores();
  static const int kPlayerScoresFieldNumber = 1;
  ::protoMsg::VoteResponse_Plaerscore* mutable_playerscores(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::VoteResponse_Plaerscore >*
      mutable_playerscores();
  const ::protoMsg::VoteResponse_Plaerscore& playerscores(int index) const;
  ::protoMsg::VoteResponse_Plaerscore* add_playerscores();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::VoteResponse_Plaerscore >&
      playerscores() const;

  // @@protoc_insertion_point(class_scope:protoMsg.VoteResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::VoteResponse_Plaerscore > playerscores_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_voteServer_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateVote_Judge

// string name = 1;
inline void CreateVote_Judge::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote_Judge::name() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.Judge.name)
  return name_.GetNoArena();
}
inline void CreateVote_Judge::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.Judge.name)
}
#if LANG_CXX11
inline void CreateVote_Judge::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.Judge.name)
}
#endif
inline void CreateVote_Judge::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.Judge.name)
}
inline void CreateVote_Judge::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.Judge.name)
}
inline ::std::string* CreateVote_Judge::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.Judge.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote_Judge::release_name() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.Judge.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote_Judge::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.Judge.name)
}

// string ID = 2;
inline void CreateVote_Judge::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote_Judge::id() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.Judge.ID)
  return id_.GetNoArena();
}
inline void CreateVote_Judge::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.Judge.ID)
}
#if LANG_CXX11
inline void CreateVote_Judge::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.Judge.ID)
}
#endif
inline void CreateVote_Judge::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.Judge.ID)
}
inline void CreateVote_Judge::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.Judge.ID)
}
inline ::std::string* CreateVote_Judge::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.Judge.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote_Judge::release_id() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.Judge.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote_Judge::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.Judge.ID)
}

// -------------------------------------------------------------------

// CreateVote

// string type = 1;
inline void CreateVote::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.type)
  return type_.GetNoArena();
}
inline void CreateVote::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.type)
}
#if LANG_CXX11
inline void CreateVote::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.type)
}
#endif
inline void CreateVote::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.type)
}
inline void CreateVote::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.type)
}
inline ::std::string* CreateVote::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.type)
}

// string voteName = 2;
inline void CreateVote::clear_votename() {
  votename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::votename() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.voteName)
  return votename_.GetNoArena();
}
inline void CreateVote::set_votename(const ::std::string& value) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.voteName)
}
#if LANG_CXX11
inline void CreateVote::set_votename(::std::string&& value) {
  
  votename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.voteName)
}
#endif
inline void CreateVote::set_votename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.voteName)
}
inline void CreateVote::set_votename(const char* value, size_t size) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.voteName)
}
inline ::std::string* CreateVote::mutable_votename() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.voteName)
  return votename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_votename() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.voteName)
  
  return votename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_votename(::std::string* votename) {
  if (votename != NULL) {
    
  } else {
    
  }
  votename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), votename);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.voteName)
}

// string dazhongWeight = 3;
inline void CreateVote::clear_dazhongweight() {
  dazhongweight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::dazhongweight() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.dazhongWeight)
  return dazhongweight_.GetNoArena();
}
inline void CreateVote::set_dazhongweight(const ::std::string& value) {
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.dazhongWeight)
}
#if LANG_CXX11
inline void CreateVote::set_dazhongweight(::std::string&& value) {
  
  dazhongweight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.dazhongWeight)
}
#endif
inline void CreateVote::set_dazhongweight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.dazhongWeight)
}
inline void CreateVote::set_dazhongweight(const char* value, size_t size) {
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.dazhongWeight)
}
inline ::std::string* CreateVote::mutable_dazhongweight() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.dazhongWeight)
  return dazhongweight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_dazhongweight() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.dazhongWeight)
  
  return dazhongweight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_dazhongweight(::std::string* dazhongweight) {
  if (dazhongweight != NULL) {
    
  } else {
    
  }
  dazhongweight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dazhongweight);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.dazhongWeight)
}

// string zhuanyeWeight = 4;
inline void CreateVote::clear_zhuanyeweight() {
  zhuanyeweight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::zhuanyeweight() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.zhuanyeWeight)
  return zhuanyeweight_.GetNoArena();
}
inline void CreateVote::set_zhuanyeweight(const ::std::string& value) {
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.zhuanyeWeight)
}
#if LANG_CXX11
inline void CreateVote::set_zhuanyeweight(::std::string&& value) {
  
  zhuanyeweight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.zhuanyeWeight)
}
#endif
inline void CreateVote::set_zhuanyeweight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.zhuanyeWeight)
}
inline void CreateVote::set_zhuanyeweight(const char* value, size_t size) {
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.zhuanyeWeight)
}
inline ::std::string* CreateVote::mutable_zhuanyeweight() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.zhuanyeWeight)
  return zhuanyeweight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_zhuanyeweight() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.zhuanyeWeight)
  
  return zhuanyeweight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_zhuanyeweight(::std::string* zhuanyeweight) {
  if (zhuanyeweight != NULL) {
    
  } else {
    
  }
  zhuanyeweight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zhuanyeweight);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.zhuanyeWeight)
}

// repeated .protoMsg.CreateVote.Judge judgeChoose = 5;
inline int CreateVote::judgechoose_size() const {
  return judgechoose_.size();
}
inline void CreateVote::clear_judgechoose() {
  judgechoose_.Clear();
}
inline ::protoMsg::CreateVote_Judge* CreateVote::mutable_judgechoose(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >*
CreateVote::mutable_judgechoose() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.CreateVote.judgeChoose)
  return &judgechoose_;
}
inline const ::protoMsg::CreateVote_Judge& CreateVote::judgechoose(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Get(index);
}
inline ::protoMsg::CreateVote_Judge* CreateVote::add_judgechoose() {
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >&
CreateVote::judgechoose() const {
  // @@protoc_insertion_point(field_list:protoMsg.CreateVote.judgeChoose)
  return judgechoose_;
}

// repeated string playerChoose = 6;
inline int CreateVote::playerchoose_size() const {
  return playerchoose_.size();
}
inline void CreateVote::clear_playerchoose() {
  playerchoose_.Clear();
}
inline const ::std::string& CreateVote::playerchoose(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Get(index);
}
inline ::std::string* CreateVote::mutable_playerchoose(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Mutable(index);
}
inline void CreateVote::set_playerchoose(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.playerChoose)
  playerchoose_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateVote::set_playerchoose(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.playerChoose)
  playerchoose_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateVote::set_playerchoose(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playerchoose_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.playerChoose)
}
inline void CreateVote::set_playerchoose(int index, const char* value, size_t size) {
  playerchoose_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.playerChoose)
}
inline ::std::string* CreateVote::add_playerchoose() {
  // @@protoc_insertion_point(field_add_mutable:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Add();
}
inline void CreateVote::add_playerchoose(const ::std::string& value) {
  playerchoose_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.playerChoose)
}
#if LANG_CXX11
inline void CreateVote::add_playerchoose(::std::string&& value) {
  playerchoose_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.playerChoose)
}
#endif
inline void CreateVote::add_playerchoose(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playerchoose_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protoMsg.CreateVote.playerChoose)
}
inline void CreateVote::add_playerchoose(const char* value, size_t size) {
  playerchoose_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protoMsg.CreateVote.playerChoose)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateVote::playerchoose() const {
  // @@protoc_insertion_point(field_list:protoMsg.CreateVote.playerChoose)
  return playerchoose_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateVote::mutable_playerchoose() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.CreateVote.playerChoose)
  return &playerchoose_;
}

// string deadline = 7;
inline void CreateVote::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::deadline() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.deadline)
  return deadline_.GetNoArena();
}
inline void CreateVote::set_deadline(const ::std::string& value) {
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.deadline)
}
#if LANG_CXX11
inline void CreateVote::set_deadline(::std::string&& value) {
  
  deadline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.deadline)
}
#endif
inline void CreateVote::set_deadline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.deadline)
}
inline void CreateVote::set_deadline(const char* value, size_t size) {
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.deadline)
}
inline ::std::string* CreateVote::mutable_deadline() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_deadline() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.deadline)
  
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    
  } else {
    
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.deadline)
}

// -------------------------------------------------------------------

// CreateVoteResponse

// string result = 1;
inline void CreateVoteResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVoteResponse::result() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVoteResponse.result)
  return result_.GetNoArena();
}
inline void CreateVoteResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVoteResponse.result)
}
#if LANG_CXX11
inline void CreateVoteResponse::set_result(::std::string&& value) {
  
  result_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVoteResponse.result)
}
#endif
inline void CreateVoteResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVoteResponse.result)
}
inline void CreateVoteResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVoteResponse.result)
}
inline ::std::string* CreateVoteResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVoteResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVoteResponse::release_result() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVoteResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVoteResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVoteResponse.result)
}

// -------------------------------------------------------------------

// GetAllVotes

// string type = 1;
inline void GetAllVotes::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAllVotes::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetAllVotes.type)
  return type_.GetNoArena();
}
inline void GetAllVotes::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetAllVotes.type)
}
#if LANG_CXX11
inline void GetAllVotes::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetAllVotes.type)
}
#endif
inline void GetAllVotes::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetAllVotes.type)
}
inline void GetAllVotes::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetAllVotes.type)
}
inline ::std::string* GetAllVotes::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetAllVotes.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAllVotes::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.GetAllVotes.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllVotes::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetAllVotes.type)
}

// -------------------------------------------------------------------

// GetAllVotesResponse_Vote

// string voteName = 1;
inline void GetAllVotesResponse_Vote::clear_votename() {
  votename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAllVotesResponse_Vote::votename() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetAllVotesResponse.Vote.voteName)
  return votename_.GetNoArena();
}
inline void GetAllVotesResponse_Vote::set_votename(const ::std::string& value) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetAllVotesResponse.Vote.voteName)
}
#if LANG_CXX11
inline void GetAllVotesResponse_Vote::set_votename(::std::string&& value) {
  
  votename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetAllVotesResponse.Vote.voteName)
}
#endif
inline void GetAllVotesResponse_Vote::set_votename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetAllVotesResponse.Vote.voteName)
}
inline void GetAllVotesResponse_Vote::set_votename(const char* value, size_t size) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetAllVotesResponse.Vote.voteName)
}
inline ::std::string* GetAllVotesResponse_Vote::mutable_votename() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetAllVotesResponse.Vote.voteName)
  return votename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAllVotesResponse_Vote::release_votename() {
  // @@protoc_insertion_point(field_release:protoMsg.GetAllVotesResponse.Vote.voteName)
  
  return votename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllVotesResponse_Vote::set_allocated_votename(::std::string* votename) {
  if (votename != NULL) {
    
  } else {
    
  }
  votename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), votename);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetAllVotesResponse.Vote.voteName)
}

// string voteID = 2;
inline void GetAllVotesResponse_Vote::clear_voteid() {
  voteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAllVotesResponse_Vote::voteid() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetAllVotesResponse.Vote.voteID)
  return voteid_.GetNoArena();
}
inline void GetAllVotesResponse_Vote::set_voteid(const ::std::string& value) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetAllVotesResponse.Vote.voteID)
}
#if LANG_CXX11
inline void GetAllVotesResponse_Vote::set_voteid(::std::string&& value) {
  
  voteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetAllVotesResponse.Vote.voteID)
}
#endif
inline void GetAllVotesResponse_Vote::set_voteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetAllVotesResponse.Vote.voteID)
}
inline void GetAllVotesResponse_Vote::set_voteid(const char* value, size_t size) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetAllVotesResponse.Vote.voteID)
}
inline ::std::string* GetAllVotesResponse_Vote::mutable_voteid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetAllVotesResponse.Vote.voteID)
  return voteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAllVotesResponse_Vote::release_voteid() {
  // @@protoc_insertion_point(field_release:protoMsg.GetAllVotesResponse.Vote.voteID)
  
  return voteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllVotesResponse_Vote::set_allocated_voteid(::std::string* voteid) {
  if (voteid != NULL) {
    
  } else {
    
  }
  voteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voteid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetAllVotesResponse.Vote.voteID)
}

// string isValid = 3;
inline void GetAllVotesResponse_Vote::clear_isvalid() {
  isvalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetAllVotesResponse_Vote::isvalid() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetAllVotesResponse.Vote.isValid)
  return isvalid_.GetNoArena();
}
inline void GetAllVotesResponse_Vote::set_isvalid(const ::std::string& value) {
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetAllVotesResponse.Vote.isValid)
}
#if LANG_CXX11
inline void GetAllVotesResponse_Vote::set_isvalid(::std::string&& value) {
  
  isvalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetAllVotesResponse.Vote.isValid)
}
#endif
inline void GetAllVotesResponse_Vote::set_isvalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetAllVotesResponse.Vote.isValid)
}
inline void GetAllVotesResponse_Vote::set_isvalid(const char* value, size_t size) {
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetAllVotesResponse.Vote.isValid)
}
inline ::std::string* GetAllVotesResponse_Vote::mutable_isvalid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetAllVotesResponse.Vote.isValid)
  return isvalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetAllVotesResponse_Vote::release_isvalid() {
  // @@protoc_insertion_point(field_release:protoMsg.GetAllVotesResponse.Vote.isValid)
  
  return isvalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetAllVotesResponse_Vote::set_allocated_isvalid(::std::string* isvalid) {
  if (isvalid != NULL) {
    
  } else {
    
  }
  isvalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isvalid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetAllVotesResponse.Vote.isValid)
}

// -------------------------------------------------------------------

// GetAllVotesResponse

// repeated .protoMsg.GetAllVotesResponse.Vote votes = 1;
inline int GetAllVotesResponse::votes_size() const {
  return votes_.size();
}
inline void GetAllVotesResponse::clear_votes() {
  votes_.Clear();
}
inline ::protoMsg::GetAllVotesResponse_Vote* GetAllVotesResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.GetAllVotesResponse.votes)
  return votes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::GetAllVotesResponse_Vote >*
GetAllVotesResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.GetAllVotesResponse.votes)
  return &votes_;
}
inline const ::protoMsg::GetAllVotesResponse_Vote& GetAllVotesResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.GetAllVotesResponse.votes)
  return votes_.Get(index);
}
inline ::protoMsg::GetAllVotesResponse_Vote* GetAllVotesResponse::add_votes() {
  // @@protoc_insertion_point(field_add:protoMsg.GetAllVotesResponse.votes)
  return votes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::GetAllVotesResponse_Vote >&
GetAllVotesResponse::votes() const {
  // @@protoc_insertion_point(field_list:protoMsg.GetAllVotesResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// GetVoteResult

// string type = 1;
inline void GetVoteResult::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResult::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResult.type)
  return type_.GetNoArena();
}
inline void GetVoteResult::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResult.type)
}
#if LANG_CXX11
inline void GetVoteResult::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResult.type)
}
#endif
inline void GetVoteResult::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResult.type)
}
inline void GetVoteResult::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResult.type)
}
inline ::std::string* GetVoteResult::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResult.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResult::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResult.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResult::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResult.type)
}

// string voteID = 2;
inline void GetVoteResult::clear_voteid() {
  voteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResult::voteid() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResult.voteID)
  return voteid_.GetNoArena();
}
inline void GetVoteResult::set_voteid(const ::std::string& value) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResult.voteID)
}
#if LANG_CXX11
inline void GetVoteResult::set_voteid(::std::string&& value) {
  
  voteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResult.voteID)
}
#endif
inline void GetVoteResult::set_voteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResult.voteID)
}
inline void GetVoteResult::set_voteid(const char* value, size_t size) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResult.voteID)
}
inline ::std::string* GetVoteResult::mutable_voteid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResult.voteID)
  return voteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResult::release_voteid() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResult.voteID)
  
  return voteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResult::set_allocated_voteid(::std::string* voteid) {
  if (voteid != NULL) {
    
  } else {
    
  }
  voteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voteid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResult.voteID)
}

// -------------------------------------------------------------------

// GetVoteResultByOneJudge

// string type = 1;
inline void GetVoteResultByOneJudge::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudge::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudge.type)
  return type_.GetNoArena();
}
inline void GetVoteResultByOneJudge::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudge.type)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudge::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudge.type)
}
#endif
inline void GetVoteResultByOneJudge::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudge.type)
}
inline void GetVoteResultByOneJudge::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudge.type)
}
inline ::std::string* GetVoteResultByOneJudge::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudge.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudge::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudge.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudge::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudge.type)
}

// string uname = 2;
inline void GetVoteResultByOneJudge::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudge::uname() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudge.uname)
  return uname_.GetNoArena();
}
inline void GetVoteResultByOneJudge::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudge.uname)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudge::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudge.uname)
}
#endif
inline void GetVoteResultByOneJudge::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudge.uname)
}
inline void GetVoteResultByOneJudge::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudge.uname)
}
inline ::std::string* GetVoteResultByOneJudge::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudge.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudge::release_uname() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudge.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudge::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudge.uname)
}

// string ustatus = 3;
inline void GetVoteResultByOneJudge::clear_ustatus() {
  ustatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudge::ustatus() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudge.ustatus)
  return ustatus_.GetNoArena();
}
inline void GetVoteResultByOneJudge::set_ustatus(const ::std::string& value) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudge.ustatus)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudge::set_ustatus(::std::string&& value) {
  
  ustatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudge.ustatus)
}
#endif
inline void GetVoteResultByOneJudge::set_ustatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudge.ustatus)
}
inline void GetVoteResultByOneJudge::set_ustatus(const char* value, size_t size) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudge.ustatus)
}
inline ::std::string* GetVoteResultByOneJudge::mutable_ustatus() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudge.ustatus)
  return ustatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudge::release_ustatus() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudge.ustatus)
  
  return ustatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudge::set_allocated_ustatus(::std::string* ustatus) {
  if (ustatus != NULL) {
    
  } else {
    
  }
  ustatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ustatus);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudge.ustatus)
}

// -------------------------------------------------------------------

// GetVoteResultByOneJudgeResponse_Vote

// string voteName = 1;
inline void GetVoteResultByOneJudgeResponse_Vote::clear_votename() {
  votename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudgeResponse_Vote::votename() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
  return votename_.GetNoArena();
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_votename(const ::std::string& value) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudgeResponse_Vote::set_votename(::std::string&& value) {
  
  votename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
}
#endif
inline void GetVoteResultByOneJudgeResponse_Vote::set_votename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_votename(const char* value, size_t size) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::mutable_votename() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
  return votename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::release_votename() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
  
  return votename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_allocated_votename(::std::string* votename) {
  if (votename != NULL) {
    
  } else {
    
  }
  votename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), votename);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteName)
}

// string voteID = 2;
inline void GetVoteResultByOneJudgeResponse_Vote::clear_voteid() {
  voteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudgeResponse_Vote::voteid() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
  return voteid_.GetNoArena();
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_voteid(const ::std::string& value) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudgeResponse_Vote::set_voteid(::std::string&& value) {
  
  voteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
}
#endif
inline void GetVoteResultByOneJudgeResponse_Vote::set_voteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_voteid(const char* value, size_t size) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::mutable_voteid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
  return voteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::release_voteid() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
  
  return voteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_allocated_voteid(::std::string* voteid) {
  if (voteid != NULL) {
    
  } else {
    
  }
  voteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voteid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudgeResponse.Vote.voteID)
}

// string isValid = 3;
inline void GetVoteResultByOneJudgeResponse_Vote::clear_isvalid() {
  isvalid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudgeResponse_Vote::isvalid() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
  return isvalid_.GetNoArena();
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvalid(const ::std::string& value) {
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvalid(::std::string&& value) {
  
  isvalid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
}
#endif
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvalid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvalid(const char* value, size_t size) {
  
  isvalid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::mutable_isvalid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
  return isvalid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::release_isvalid() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
  
  return isvalid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_allocated_isvalid(::std::string* isvalid) {
  if (isvalid != NULL) {
    
  } else {
    
  }
  isvalid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isvalid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isValid)
}

// string isVoted = 4;
inline void GetVoteResultByOneJudgeResponse_Vote::clear_isvoted() {
  isvoted_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetVoteResultByOneJudgeResponse_Vote::isvoted() const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
  return isvoted_.GetNoArena();
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvoted(const ::std::string& value) {
  
  isvoted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
}
#if LANG_CXX11
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvoted(::std::string&& value) {
  
  isvoted_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
}
#endif
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvoted(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  isvoted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_isvoted(const char* value, size_t size) {
  
  isvoted_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::mutable_isvoted() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
  return isvoted_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetVoteResultByOneJudgeResponse_Vote::release_isvoted() {
  // @@protoc_insertion_point(field_release:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
  
  return isvoted_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetVoteResultByOneJudgeResponse_Vote::set_allocated_isvoted(::std::string* isvoted) {
  if (isvoted != NULL) {
    
  } else {
    
  }
  isvoted_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), isvoted);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.GetVoteResultByOneJudgeResponse.Vote.isVoted)
}

// -------------------------------------------------------------------

// GetVoteResultByOneJudgeResponse

// repeated .protoMsg.GetVoteResultByOneJudgeResponse.Vote votes = 1;
inline int GetVoteResultByOneJudgeResponse::votes_size() const {
  return votes_.size();
}
inline void GetVoteResultByOneJudgeResponse::clear_votes() {
  votes_.Clear();
}
inline ::protoMsg::GetVoteResultByOneJudgeResponse_Vote* GetVoteResultByOneJudgeResponse::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.GetVoteResultByOneJudgeResponse.votes)
  return votes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::GetVoteResultByOneJudgeResponse_Vote >*
GetVoteResultByOneJudgeResponse::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.GetVoteResultByOneJudgeResponse.votes)
  return &votes_;
}
inline const ::protoMsg::GetVoteResultByOneJudgeResponse_Vote& GetVoteResultByOneJudgeResponse::votes(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.GetVoteResultByOneJudgeResponse.votes)
  return votes_.Get(index);
}
inline ::protoMsg::GetVoteResultByOneJudgeResponse_Vote* GetVoteResultByOneJudgeResponse::add_votes() {
  // @@protoc_insertion_point(field_add:protoMsg.GetVoteResultByOneJudgeResponse.votes)
  return votes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::GetVoteResultByOneJudgeResponse_Vote >&
GetVoteResultByOneJudgeResponse::votes() const {
  // @@protoc_insertion_point(field_list:protoMsg.GetVoteResultByOneJudgeResponse.votes)
  return votes_;
}

// -------------------------------------------------------------------

// LoginRequest

// string type = 1;
inline void LoginRequest::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.LoginRequest.type)
  return type_.GetNoArena();
}
inline void LoginRequest::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.LoginRequest.type)
}
#if LANG_CXX11
inline void LoginRequest::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.LoginRequest.type)
}
#endif
inline void LoginRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.LoginRequest.type)
}
inline void LoginRequest::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.LoginRequest.type)
}
inline ::std::string* LoginRequest::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.LoginRequest.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.LoginRequest.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.LoginRequest.type)
}

// string uname = 2;
inline void LoginRequest::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::uname() const {
  // @@protoc_insertion_point(field_get:protoMsg.LoginRequest.uname)
  return uname_.GetNoArena();
}
inline void LoginRequest::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.LoginRequest.uname)
}
#if LANG_CXX11
inline void LoginRequest::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.LoginRequest.uname)
}
#endif
inline void LoginRequest::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.LoginRequest.uname)
}
inline void LoginRequest::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.LoginRequest.uname)
}
inline ::std::string* LoginRequest::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.LoginRequest.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_uname() {
  // @@protoc_insertion_point(field_release:protoMsg.LoginRequest.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.LoginRequest.uname)
}

// string upwd = 3;
inline void LoginRequest::clear_upwd() {
  upwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginRequest::upwd() const {
  // @@protoc_insertion_point(field_get:protoMsg.LoginRequest.upwd)
  return upwd_.GetNoArena();
}
inline void LoginRequest::set_upwd(const ::std::string& value) {
  
  upwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.LoginRequest.upwd)
}
#if LANG_CXX11
inline void LoginRequest::set_upwd(::std::string&& value) {
  
  upwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.LoginRequest.upwd)
}
#endif
inline void LoginRequest::set_upwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.LoginRequest.upwd)
}
inline void LoginRequest::set_upwd(const char* value, size_t size) {
  
  upwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.LoginRequest.upwd)
}
inline ::std::string* LoginRequest::mutable_upwd() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.LoginRequest.upwd)
  return upwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginRequest::release_upwd() {
  // @@protoc_insertion_point(field_release:protoMsg.LoginRequest.upwd)
  
  return upwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginRequest::set_allocated_upwd(::std::string* upwd) {
  if (upwd != NULL) {
    
  } else {
    
  }
  upwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upwd);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.LoginRequest.upwd)
}

// -------------------------------------------------------------------

// LoginResponse

// string uname = 1;
inline void LoginResponse::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::uname() const {
  // @@protoc_insertion_point(field_get:protoMsg.LoginResponse.uname)
  return uname_.GetNoArena();
}
inline void LoginResponse::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.LoginResponse.uname)
}
#if LANG_CXX11
inline void LoginResponse::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.LoginResponse.uname)
}
#endif
inline void LoginResponse::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.LoginResponse.uname)
}
inline void LoginResponse::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.LoginResponse.uname)
}
inline ::std::string* LoginResponse::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.LoginResponse.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_uname() {
  // @@protoc_insertion_point(field_release:protoMsg.LoginResponse.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.LoginResponse.uname)
}

// string id = 2;
inline void LoginResponse::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LoginResponse::id() const {
  // @@protoc_insertion_point(field_get:protoMsg.LoginResponse.id)
  return id_.GetNoArena();
}
inline void LoginResponse::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.LoginResponse.id)
}
#if LANG_CXX11
inline void LoginResponse::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.LoginResponse.id)
}
#endif
inline void LoginResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.LoginResponse.id)
}
inline void LoginResponse::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.LoginResponse.id)
}
inline ::std::string* LoginResponse::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.LoginResponse.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoginResponse::release_id() {
  // @@protoc_insertion_point(field_release:protoMsg.LoginResponse.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoginResponse::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.LoginResponse.id)
}

// -------------------------------------------------------------------

// Vote_Plaer_score

// string name = 1;
inline void Vote_Plaer_score::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote_Plaer_score::name() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.Plaer_score.name)
  return name_.GetNoArena();
}
inline void Vote_Plaer_score::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.Plaer_score.name)
}
#if LANG_CXX11
inline void Vote_Plaer_score::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.Plaer_score.name)
}
#endif
inline void Vote_Plaer_score::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.Plaer_score.name)
}
inline void Vote_Plaer_score::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.Plaer_score.name)
}
inline ::std::string* Vote_Plaer_score::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.Plaer_score.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote_Plaer_score::release_name() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.Plaer_score.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote_Plaer_score::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.Plaer_score.name)
}

// string score = 2;
inline void Vote_Plaer_score::clear_score() {
  score_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote_Plaer_score::score() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.Plaer_score.score)
  return score_.GetNoArena();
}
inline void Vote_Plaer_score::set_score(const ::std::string& value) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.Plaer_score.score)
}
#if LANG_CXX11
inline void Vote_Plaer_score::set_score(::std::string&& value) {
  
  score_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.Plaer_score.score)
}
#endif
inline void Vote_Plaer_score::set_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.Plaer_score.score)
}
inline void Vote_Plaer_score::set_score(const char* value, size_t size) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.Plaer_score.score)
}
inline ::std::string* Vote_Plaer_score::mutable_score() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.Plaer_score.score)
  return score_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote_Plaer_score::release_score() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.Plaer_score.score)
  
  return score_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote_Plaer_score::set_allocated_score(::std::string* score) {
  if (score != NULL) {
    
  } else {
    
  }
  score_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.Plaer_score.score)
}

// -------------------------------------------------------------------

// Vote

// string type = 1;
inline void Vote::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.type)
  return type_.GetNoArena();
}
inline void Vote::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.type)
}
#if LANG_CXX11
inline void Vote::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.type)
}
#endif
inline void Vote::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.type)
}
inline void Vote::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.type)
}
inline ::std::string* Vote::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.type)
}

// string uname = 2;
inline void Vote::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::uname() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.uname)
  return uname_.GetNoArena();
}
inline void Vote::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.uname)
}
#if LANG_CXX11
inline void Vote::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.uname)
}
#endif
inline void Vote::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.uname)
}
inline void Vote::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.uname)
}
inline ::std::string* Vote::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_uname() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.uname)
}

// string ustatus = 3;
inline void Vote::clear_ustatus() {
  ustatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::ustatus() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.ustatus)
  return ustatus_.GetNoArena();
}
inline void Vote::set_ustatus(const ::std::string& value) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.ustatus)
}
#if LANG_CXX11
inline void Vote::set_ustatus(::std::string&& value) {
  
  ustatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.ustatus)
}
#endif
inline void Vote::set_ustatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.ustatus)
}
inline void Vote::set_ustatus(const char* value, size_t size) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.ustatus)
}
inline ::std::string* Vote::mutable_ustatus() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.ustatus)
  return ustatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_ustatus() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.ustatus)
  
  return ustatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_ustatus(::std::string* ustatus) {
  if (ustatus != NULL) {
    
  } else {
    
  }
  ustatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ustatus);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.ustatus)
}

// repeated .protoMsg.Vote.Plaer_score plaerPoints = 4;
inline int Vote::plaerpoints_size() const {
  return plaerpoints_.size();
}
inline void Vote::clear_plaerpoints() {
  plaerpoints_.Clear();
}
inline ::protoMsg::Vote_Plaer_score* Vote::mutable_plaerpoints(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >*
Vote::mutable_plaerpoints() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.Vote.plaerPoints)
  return &plaerpoints_;
}
inline const ::protoMsg::Vote_Plaer_score& Vote::plaerpoints(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Get(index);
}
inline ::protoMsg::Vote_Plaer_score* Vote::add_plaerpoints() {
  // @@protoc_insertion_point(field_add:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >&
Vote::plaerpoints() const {
  // @@protoc_insertion_point(field_list:protoMsg.Vote.plaerPoints)
  return plaerpoints_;
}

// string voteID = 5;
inline void Vote::clear_voteid() {
  voteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::voteid() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.voteID)
  return voteid_.GetNoArena();
}
inline void Vote::set_voteid(const ::std::string& value) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.voteID)
}
#if LANG_CXX11
inline void Vote::set_voteid(::std::string&& value) {
  
  voteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.voteID)
}
#endif
inline void Vote::set_voteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.voteID)
}
inline void Vote::set_voteid(const char* value, size_t size) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.voteID)
}
inline ::std::string* Vote::mutable_voteid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.voteID)
  return voteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_voteid() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.voteID)
  
  return voteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_voteid(::std::string* voteid) {
  if (voteid != NULL) {
    
  } else {
    
  }
  voteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voteid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.voteID)
}

// -------------------------------------------------------------------

// VoteResponse_Plaerscore

// string name = 1;
inline void VoteResponse_Plaerscore::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteResponse_Plaerscore::name() const {
  // @@protoc_insertion_point(field_get:protoMsg.VoteResponse.Plaerscore.name)
  return name_.GetNoArena();
}
inline void VoteResponse_Plaerscore::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.VoteResponse.Plaerscore.name)
}
#if LANG_CXX11
inline void VoteResponse_Plaerscore::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.VoteResponse.Plaerscore.name)
}
#endif
inline void VoteResponse_Plaerscore::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.VoteResponse.Plaerscore.name)
}
inline void VoteResponse_Plaerscore::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.VoteResponse.Plaerscore.name)
}
inline ::std::string* VoteResponse_Plaerscore::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.VoteResponse.Plaerscore.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteResponse_Plaerscore::release_name() {
  // @@protoc_insertion_point(field_release:protoMsg.VoteResponse.Plaerscore.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteResponse_Plaerscore::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.VoteResponse.Plaerscore.name)
}

// string score = 2;
inline void VoteResponse_Plaerscore::clear_score() {
  score_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VoteResponse_Plaerscore::score() const {
  // @@protoc_insertion_point(field_get:protoMsg.VoteResponse.Plaerscore.score)
  return score_.GetNoArena();
}
inline void VoteResponse_Plaerscore::set_score(const ::std::string& value) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.VoteResponse.Plaerscore.score)
}
#if LANG_CXX11
inline void VoteResponse_Plaerscore::set_score(::std::string&& value) {
  
  score_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.VoteResponse.Plaerscore.score)
}
#endif
inline void VoteResponse_Plaerscore::set_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.VoteResponse.Plaerscore.score)
}
inline void VoteResponse_Plaerscore::set_score(const char* value, size_t size) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.VoteResponse.Plaerscore.score)
}
inline ::std::string* VoteResponse_Plaerscore::mutable_score() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.VoteResponse.Plaerscore.score)
  return score_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VoteResponse_Plaerscore::release_score() {
  // @@protoc_insertion_point(field_release:protoMsg.VoteResponse.Plaerscore.score)
  
  return score_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VoteResponse_Plaerscore::set_allocated_score(::std::string* score) {
  if (score != NULL) {
    
  } else {
    
  }
  score_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.VoteResponse.Plaerscore.score)
}

// -------------------------------------------------------------------

// VoteResponse

// repeated .protoMsg.VoteResponse.Plaerscore playerScores = 1;
inline int VoteResponse::playerscores_size() const {
  return playerscores_.size();
}
inline void VoteResponse::clear_playerscores() {
  playerscores_.Clear();
}
inline ::protoMsg::VoteResponse_Plaerscore* VoteResponse::mutable_playerscores(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.VoteResponse.playerScores)
  return playerscores_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::VoteResponse_Plaerscore >*
VoteResponse::mutable_playerscores() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.VoteResponse.playerScores)
  return &playerscores_;
}
inline const ::protoMsg::VoteResponse_Plaerscore& VoteResponse::playerscores(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.VoteResponse.playerScores)
  return playerscores_.Get(index);
}
inline ::protoMsg::VoteResponse_Plaerscore* VoteResponse::add_playerscores() {
  // @@protoc_insertion_point(field_add:protoMsg.VoteResponse.playerScores)
  return playerscores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::VoteResponse_Plaerscore >&
VoteResponse::playerscores() const {
  // @@protoc_insertion_point(field_list:protoMsg.VoteResponse.playerScores)
  return playerscores_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_voteServer_5fproto_2eproto
