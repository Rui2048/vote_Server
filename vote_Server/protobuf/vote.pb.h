// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vote.proto

#ifndef PROTOBUF_INCLUDED_vote_2eproto
#define PROTOBUF_INCLUDED_vote_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_vote_2eproto 

namespace protobuf_vote_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_vote_2eproto
namespace protoMsg {
class Vote;
class VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class Vote_Plaer_score;
class Vote_Plaer_scoreDefaultTypeInternal;
extern Vote_Plaer_scoreDefaultTypeInternal _Vote_Plaer_score_default_instance_;
}  // namespace protoMsg
namespace google {
namespace protobuf {
template<> ::protoMsg::Vote* Arena::CreateMaybeMessage<::protoMsg::Vote>(Arena*);
template<> ::protoMsg::Vote_Plaer_score* Arena::CreateMaybeMessage<::protoMsg::Vote_Plaer_score>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protoMsg {

// ===================================================================

class Vote_Plaer_score : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.Vote.Plaer_score) */ {
 public:
  Vote_Plaer_score();
  virtual ~Vote_Plaer_score();

  Vote_Plaer_score(const Vote_Plaer_score& from);

  inline Vote_Plaer_score& operator=(const Vote_Plaer_score& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vote_Plaer_score(Vote_Plaer_score&& from) noexcept
    : Vote_Plaer_score() {
    *this = ::std::move(from);
  }

  inline Vote_Plaer_score& operator=(Vote_Plaer_score&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vote_Plaer_score& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote_Plaer_score* internal_default_instance() {
    return reinterpret_cast<const Vote_Plaer_score*>(
               &_Vote_Plaer_score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vote_Plaer_score* other);
  friend void swap(Vote_Plaer_score& a, Vote_Plaer_score& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vote_Plaer_score* New() const final {
    return CreateMaybeMessage<Vote_Plaer_score>(NULL);
  }

  Vote_Plaer_score* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vote_Plaer_score>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vote_Plaer_score& from);
  void MergeFrom(const Vote_Plaer_score& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote_Plaer_score* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  const ::std::string& score() const;
  void set_score(const ::std::string& value);
  #if LANG_CXX11
  void set_score(::std::string&& value);
  #endif
  void set_score(const char* value);
  void set_score(const char* value, size_t size);
  ::std::string* mutable_score();
  ::std::string* release_score();
  void set_allocated_score(::std::string* score);

  // @@protoc_insertion_point(class_scope:protoMsg.Vote.Plaer_score)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.Vote) */ {
 public:
  Vote();
  virtual ~Vote();

  Vote(const Vote& from);

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Vote* other);
  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vote* New() const final {
    return CreateMaybeMessage<Vote>(NULL);
  }

  Vote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Vote_Plaer_score Plaer_score;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.Vote.Plaer_score plaerPoints = 4;
  int plaerpoints_size() const;
  void clear_plaerpoints();
  static const int kPlaerPointsFieldNumber = 4;
  ::protoMsg::Vote_Plaer_score* mutable_plaerpoints(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >*
      mutable_plaerpoints();
  const ::protoMsg::Vote_Plaer_score& plaerpoints(int index) const;
  ::protoMsg::Vote_Plaer_score* add_plaerpoints();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >&
      plaerpoints() const;

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string uname = 2;
  void clear_uname();
  static const int kUnameFieldNumber = 2;
  const ::std::string& uname() const;
  void set_uname(const ::std::string& value);
  #if LANG_CXX11
  void set_uname(::std::string&& value);
  #endif
  void set_uname(const char* value);
  void set_uname(const char* value, size_t size);
  ::std::string* mutable_uname();
  ::std::string* release_uname();
  void set_allocated_uname(::std::string* uname);

  // string ustatus = 3;
  void clear_ustatus();
  static const int kUstatusFieldNumber = 3;
  const ::std::string& ustatus() const;
  void set_ustatus(const ::std::string& value);
  #if LANG_CXX11
  void set_ustatus(::std::string&& value);
  #endif
  void set_ustatus(const char* value);
  void set_ustatus(const char* value, size_t size);
  ::std::string* mutable_ustatus();
  ::std::string* release_ustatus();
  void set_allocated_ustatus(::std::string* ustatus);

  // string voteID = 5;
  void clear_voteid();
  static const int kVoteIDFieldNumber = 5;
  const ::std::string& voteid() const;
  void set_voteid(const ::std::string& value);
  #if LANG_CXX11
  void set_voteid(::std::string&& value);
  #endif
  void set_voteid(const char* value);
  void set_voteid(const char* value, size_t size);
  ::std::string* mutable_voteid();
  ::std::string* release_voteid();
  void set_allocated_voteid(::std::string* voteid);

  // @@protoc_insertion_point(class_scope:protoMsg.Vote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score > plaerpoints_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr uname_;
  ::google::protobuf::internal::ArenaStringPtr ustatus_;
  ::google::protobuf::internal::ArenaStringPtr voteid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_vote_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vote_Plaer_score

// string name = 1;
inline void Vote_Plaer_score::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote_Plaer_score::name() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.Plaer_score.name)
  return name_.GetNoArena();
}
inline void Vote_Plaer_score::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.Plaer_score.name)
}
#if LANG_CXX11
inline void Vote_Plaer_score::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.Plaer_score.name)
}
#endif
inline void Vote_Plaer_score::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.Plaer_score.name)
}
inline void Vote_Plaer_score::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.Plaer_score.name)
}
inline ::std::string* Vote_Plaer_score::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.Plaer_score.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote_Plaer_score::release_name() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.Plaer_score.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote_Plaer_score::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.Plaer_score.name)
}

// string score = 2;
inline void Vote_Plaer_score::clear_score() {
  score_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote_Plaer_score::score() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.Plaer_score.score)
  return score_.GetNoArena();
}
inline void Vote_Plaer_score::set_score(const ::std::string& value) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.Plaer_score.score)
}
#if LANG_CXX11
inline void Vote_Plaer_score::set_score(::std::string&& value) {
  
  score_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.Plaer_score.score)
}
#endif
inline void Vote_Plaer_score::set_score(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.Plaer_score.score)
}
inline void Vote_Plaer_score::set_score(const char* value, size_t size) {
  
  score_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.Plaer_score.score)
}
inline ::std::string* Vote_Plaer_score::mutable_score() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.Plaer_score.score)
  return score_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote_Plaer_score::release_score() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.Plaer_score.score)
  
  return score_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote_Plaer_score::set_allocated_score(::std::string* score) {
  if (score != NULL) {
    
  } else {
    
  }
  score_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.Plaer_score.score)
}

// -------------------------------------------------------------------

// Vote

// string type = 1;
inline void Vote::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.type)
  return type_.GetNoArena();
}
inline void Vote::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.type)
}
#if LANG_CXX11
inline void Vote::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.type)
}
#endif
inline void Vote::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.type)
}
inline void Vote::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.type)
}
inline ::std::string* Vote::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.type)
}

// string uname = 2;
inline void Vote::clear_uname() {
  uname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::uname() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.uname)
  return uname_.GetNoArena();
}
inline void Vote::set_uname(const ::std::string& value) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.uname)
}
#if LANG_CXX11
inline void Vote::set_uname(::std::string&& value) {
  
  uname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.uname)
}
#endif
inline void Vote::set_uname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.uname)
}
inline void Vote::set_uname(const char* value, size_t size) {
  
  uname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.uname)
}
inline ::std::string* Vote::mutable_uname() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.uname)
  return uname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_uname() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.uname)
  
  return uname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_uname(::std::string* uname) {
  if (uname != NULL) {
    
  } else {
    
  }
  uname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uname);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.uname)
}

// string ustatus = 3;
inline void Vote::clear_ustatus() {
  ustatus_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::ustatus() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.ustatus)
  return ustatus_.GetNoArena();
}
inline void Vote::set_ustatus(const ::std::string& value) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.ustatus)
}
#if LANG_CXX11
inline void Vote::set_ustatus(::std::string&& value) {
  
  ustatus_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.ustatus)
}
#endif
inline void Vote::set_ustatus(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.ustatus)
}
inline void Vote::set_ustatus(const char* value, size_t size) {
  
  ustatus_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.ustatus)
}
inline ::std::string* Vote::mutable_ustatus() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.ustatus)
  return ustatus_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_ustatus() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.ustatus)
  
  return ustatus_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_ustatus(::std::string* ustatus) {
  if (ustatus != NULL) {
    
  } else {
    
  }
  ustatus_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ustatus);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.ustatus)
}

// repeated .protoMsg.Vote.Plaer_score plaerPoints = 4;
inline int Vote::plaerpoints_size() const {
  return plaerpoints_.size();
}
inline void Vote::clear_plaerpoints() {
  plaerpoints_.Clear();
}
inline ::protoMsg::Vote_Plaer_score* Vote::mutable_plaerpoints(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >*
Vote::mutable_plaerpoints() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.Vote.plaerPoints)
  return &plaerpoints_;
}
inline const ::protoMsg::Vote_Plaer_score& Vote::plaerpoints(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Get(index);
}
inline ::protoMsg::Vote_Plaer_score* Vote::add_plaerpoints() {
  // @@protoc_insertion_point(field_add:protoMsg.Vote.plaerPoints)
  return plaerpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::Vote_Plaer_score >&
Vote::plaerpoints() const {
  // @@protoc_insertion_point(field_list:protoMsg.Vote.plaerPoints)
  return plaerpoints_;
}

// string voteID = 5;
inline void Vote::clear_voteid() {
  voteid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Vote::voteid() const {
  // @@protoc_insertion_point(field_get:protoMsg.Vote.voteID)
  return voteid_.GetNoArena();
}
inline void Vote::set_voteid(const ::std::string& value) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.Vote.voteID)
}
#if LANG_CXX11
inline void Vote::set_voteid(::std::string&& value) {
  
  voteid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.Vote.voteID)
}
#endif
inline void Vote::set_voteid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.Vote.voteID)
}
inline void Vote::set_voteid(const char* value, size_t size) {
  
  voteid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.Vote.voteID)
}
inline ::std::string* Vote::mutable_voteid() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.Vote.voteID)
  return voteid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Vote::release_voteid() {
  // @@protoc_insertion_point(field_release:protoMsg.Vote.voteID)
  
  return voteid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_voteid(::std::string* voteid) {
  if (voteid != NULL) {
    
  } else {
    
  }
  voteid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voteid);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.Vote.voteID)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_vote_2eproto
