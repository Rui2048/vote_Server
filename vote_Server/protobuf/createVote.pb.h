// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: createVote.proto

#ifndef PROTOBUF_INCLUDED_createVote_2eproto
#define PROTOBUF_INCLUDED_createVote_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_createVote_2eproto 

namespace protobuf_createVote_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_createVote_2eproto
namespace protoMsg {
class CreateVote;
class CreateVoteDefaultTypeInternal;
extern CreateVoteDefaultTypeInternal _CreateVote_default_instance_;
class CreateVote_Judge;
class CreateVote_JudgeDefaultTypeInternal;
extern CreateVote_JudgeDefaultTypeInternal _CreateVote_Judge_default_instance_;
}  // namespace protoMsg
namespace google {
namespace protobuf {
template<> ::protoMsg::CreateVote* Arena::CreateMaybeMessage<::protoMsg::CreateVote>(Arena*);
template<> ::protoMsg::CreateVote_Judge* Arena::CreateMaybeMessage<::protoMsg::CreateVote_Judge>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protoMsg {

// ===================================================================

class CreateVote_Judge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.CreateVote.Judge) */ {
 public:
  CreateVote_Judge();
  virtual ~CreateVote_Judge();

  CreateVote_Judge(const CreateVote_Judge& from);

  inline CreateVote_Judge& operator=(const CreateVote_Judge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVote_Judge(CreateVote_Judge&& from) noexcept
    : CreateVote_Judge() {
    *this = ::std::move(from);
  }

  inline CreateVote_Judge& operator=(CreateVote_Judge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVote_Judge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVote_Judge* internal_default_instance() {
    return reinterpret_cast<const CreateVote_Judge*>(
               &_CreateVote_Judge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CreateVote_Judge* other);
  friend void swap(CreateVote_Judge& a, CreateVote_Judge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVote_Judge* New() const final {
    return CreateMaybeMessage<CreateVote_Judge>(NULL);
  }

  CreateVote_Judge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateVote_Judge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateVote_Judge& from);
  void MergeFrom(const CreateVote_Judge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVote_Judge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:protoMsg.CreateVote.Judge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_createVote_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateVote : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protoMsg.CreateVote) */ {
 public:
  CreateVote();
  virtual ~CreateVote();

  CreateVote(const CreateVote& from);

  inline CreateVote& operator=(const CreateVote& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateVote(CreateVote&& from) noexcept
    : CreateVote() {
    *this = ::std::move(from);
  }

  inline CreateVote& operator=(CreateVote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateVote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateVote* internal_default_instance() {
    return reinterpret_cast<const CreateVote*>(
               &_CreateVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateVote* other);
  friend void swap(CreateVote& a, CreateVote& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateVote* New() const final {
    return CreateMaybeMessage<CreateVote>(NULL);
  }

  CreateVote* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateVote>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateVote& from);
  void MergeFrom(const CreateVote& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateVote* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateVote_Judge Judge;

  // accessors -------------------------------------------------------

  // repeated .protoMsg.CreateVote.Judge judgeChoose = 5;
  int judgechoose_size() const;
  void clear_judgechoose();
  static const int kJudgeChooseFieldNumber = 5;
  ::protoMsg::CreateVote_Judge* mutable_judgechoose(int index);
  ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >*
      mutable_judgechoose();
  const ::protoMsg::CreateVote_Judge& judgechoose(int index) const;
  ::protoMsg::CreateVote_Judge* add_judgechoose();
  const ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >&
      judgechoose() const;

  // repeated string playerChoose = 6;
  int playerchoose_size() const;
  void clear_playerchoose();
  static const int kPlayerChooseFieldNumber = 6;
  const ::std::string& playerchoose(int index) const;
  ::std::string* mutable_playerchoose(int index);
  void set_playerchoose(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_playerchoose(int index, ::std::string&& value);
  #endif
  void set_playerchoose(int index, const char* value);
  void set_playerchoose(int index, const char* value, size_t size);
  ::std::string* add_playerchoose();
  void add_playerchoose(const ::std::string& value);
  #if LANG_CXX11
  void add_playerchoose(::std::string&& value);
  #endif
  void add_playerchoose(const char* value);
  void add_playerchoose(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& playerchoose() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_playerchoose();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string voteName = 2;
  void clear_votename();
  static const int kVoteNameFieldNumber = 2;
  const ::std::string& votename() const;
  void set_votename(const ::std::string& value);
  #if LANG_CXX11
  void set_votename(::std::string&& value);
  #endif
  void set_votename(const char* value);
  void set_votename(const char* value, size_t size);
  ::std::string* mutable_votename();
  ::std::string* release_votename();
  void set_allocated_votename(::std::string* votename);

  // string dazhongWeight = 3;
  void clear_dazhongweight();
  static const int kDazhongWeightFieldNumber = 3;
  const ::std::string& dazhongweight() const;
  void set_dazhongweight(const ::std::string& value);
  #if LANG_CXX11
  void set_dazhongweight(::std::string&& value);
  #endif
  void set_dazhongweight(const char* value);
  void set_dazhongweight(const char* value, size_t size);
  ::std::string* mutable_dazhongweight();
  ::std::string* release_dazhongweight();
  void set_allocated_dazhongweight(::std::string* dazhongweight);

  // string zhuanyeWeight = 4;
  void clear_zhuanyeweight();
  static const int kZhuanyeWeightFieldNumber = 4;
  const ::std::string& zhuanyeweight() const;
  void set_zhuanyeweight(const ::std::string& value);
  #if LANG_CXX11
  void set_zhuanyeweight(::std::string&& value);
  #endif
  void set_zhuanyeweight(const char* value);
  void set_zhuanyeweight(const char* value, size_t size);
  ::std::string* mutable_zhuanyeweight();
  ::std::string* release_zhuanyeweight();
  void set_allocated_zhuanyeweight(::std::string* zhuanyeweight);

  // string deadline = 7;
  void clear_deadline();
  static const int kDeadlineFieldNumber = 7;
  const ::std::string& deadline() const;
  void set_deadline(const ::std::string& value);
  #if LANG_CXX11
  void set_deadline(::std::string&& value);
  #endif
  void set_deadline(const char* value);
  void set_deadline(const char* value, size_t size);
  ::std::string* mutable_deadline();
  ::std::string* release_deadline();
  void set_allocated_deadline(::std::string* deadline);

  // @@protoc_insertion_point(class_scope:protoMsg.CreateVote)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge > judgechoose_;
  ::google::protobuf::RepeatedPtrField< ::std::string> playerchoose_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr votename_;
  ::google::protobuf::internal::ArenaStringPtr dazhongweight_;
  ::google::protobuf::internal::ArenaStringPtr zhuanyeweight_;
  ::google::protobuf::internal::ArenaStringPtr deadline_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_createVote_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateVote_Judge

// string name = 1;
inline void CreateVote_Judge::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote_Judge::name() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.Judge.name)
  return name_.GetNoArena();
}
inline void CreateVote_Judge::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.Judge.name)
}
#if LANG_CXX11
inline void CreateVote_Judge::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.Judge.name)
}
#endif
inline void CreateVote_Judge::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.Judge.name)
}
inline void CreateVote_Judge::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.Judge.name)
}
inline ::std::string* CreateVote_Judge::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.Judge.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote_Judge::release_name() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.Judge.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote_Judge::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.Judge.name)
}

// string ID = 2;
inline void CreateVote_Judge::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote_Judge::id() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.Judge.ID)
  return id_.GetNoArena();
}
inline void CreateVote_Judge::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.Judge.ID)
}
#if LANG_CXX11
inline void CreateVote_Judge::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.Judge.ID)
}
#endif
inline void CreateVote_Judge::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.Judge.ID)
}
inline void CreateVote_Judge::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.Judge.ID)
}
inline ::std::string* CreateVote_Judge::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.Judge.ID)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote_Judge::release_id() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.Judge.ID)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote_Judge::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.Judge.ID)
}

// -------------------------------------------------------------------

// CreateVote

// string type = 1;
inline void CreateVote::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::type() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.type)
  return type_.GetNoArena();
}
inline void CreateVote::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.type)
}
#if LANG_CXX11
inline void CreateVote::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.type)
}
#endif
inline void CreateVote::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.type)
}
inline void CreateVote::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.type)
}
inline ::std::string* CreateVote::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_type() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.type)
}

// string voteName = 2;
inline void CreateVote::clear_votename() {
  votename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::votename() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.voteName)
  return votename_.GetNoArena();
}
inline void CreateVote::set_votename(const ::std::string& value) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.voteName)
}
#if LANG_CXX11
inline void CreateVote::set_votename(::std::string&& value) {
  
  votename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.voteName)
}
#endif
inline void CreateVote::set_votename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.voteName)
}
inline void CreateVote::set_votename(const char* value, size_t size) {
  
  votename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.voteName)
}
inline ::std::string* CreateVote::mutable_votename() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.voteName)
  return votename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_votename() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.voteName)
  
  return votename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_votename(::std::string* votename) {
  if (votename != NULL) {
    
  } else {
    
  }
  votename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), votename);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.voteName)
}

// string dazhongWeight = 3;
inline void CreateVote::clear_dazhongweight() {
  dazhongweight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::dazhongweight() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.dazhongWeight)
  return dazhongweight_.GetNoArena();
}
inline void CreateVote::set_dazhongweight(const ::std::string& value) {
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.dazhongWeight)
}
#if LANG_CXX11
inline void CreateVote::set_dazhongweight(::std::string&& value) {
  
  dazhongweight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.dazhongWeight)
}
#endif
inline void CreateVote::set_dazhongweight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.dazhongWeight)
}
inline void CreateVote::set_dazhongweight(const char* value, size_t size) {
  
  dazhongweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.dazhongWeight)
}
inline ::std::string* CreateVote::mutable_dazhongweight() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.dazhongWeight)
  return dazhongweight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_dazhongweight() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.dazhongWeight)
  
  return dazhongweight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_dazhongweight(::std::string* dazhongweight) {
  if (dazhongweight != NULL) {
    
  } else {
    
  }
  dazhongweight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dazhongweight);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.dazhongWeight)
}

// string zhuanyeWeight = 4;
inline void CreateVote::clear_zhuanyeweight() {
  zhuanyeweight_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::zhuanyeweight() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.zhuanyeWeight)
  return zhuanyeweight_.GetNoArena();
}
inline void CreateVote::set_zhuanyeweight(const ::std::string& value) {
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.zhuanyeWeight)
}
#if LANG_CXX11
inline void CreateVote::set_zhuanyeweight(::std::string&& value) {
  
  zhuanyeweight_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.zhuanyeWeight)
}
#endif
inline void CreateVote::set_zhuanyeweight(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.zhuanyeWeight)
}
inline void CreateVote::set_zhuanyeweight(const char* value, size_t size) {
  
  zhuanyeweight_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.zhuanyeWeight)
}
inline ::std::string* CreateVote::mutable_zhuanyeweight() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.zhuanyeWeight)
  return zhuanyeweight_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_zhuanyeweight() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.zhuanyeWeight)
  
  return zhuanyeweight_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_zhuanyeweight(::std::string* zhuanyeweight) {
  if (zhuanyeweight != NULL) {
    
  } else {
    
  }
  zhuanyeweight_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zhuanyeweight);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.zhuanyeWeight)
}

// repeated .protoMsg.CreateVote.Judge judgeChoose = 5;
inline int CreateVote::judgechoose_size() const {
  return judgechoose_.size();
}
inline void CreateVote::clear_judgechoose() {
  judgechoose_.Clear();
}
inline ::protoMsg::CreateVote_Judge* CreateVote::mutable_judgechoose(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >*
CreateVote::mutable_judgechoose() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.CreateVote.judgeChoose)
  return &judgechoose_;
}
inline const ::protoMsg::CreateVote_Judge& CreateVote::judgechoose(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Get(index);
}
inline ::protoMsg::CreateVote_Judge* CreateVote::add_judgechoose() {
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.judgeChoose)
  return judgechoose_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protoMsg::CreateVote_Judge >&
CreateVote::judgechoose() const {
  // @@protoc_insertion_point(field_list:protoMsg.CreateVote.judgeChoose)
  return judgechoose_;
}

// repeated string playerChoose = 6;
inline int CreateVote::playerchoose_size() const {
  return playerchoose_.size();
}
inline void CreateVote::clear_playerchoose() {
  playerchoose_.Clear();
}
inline const ::std::string& CreateVote::playerchoose(int index) const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Get(index);
}
inline ::std::string* CreateVote::mutable_playerchoose(int index) {
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Mutable(index);
}
inline void CreateVote::set_playerchoose(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.playerChoose)
  playerchoose_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateVote::set_playerchoose(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.playerChoose)
  playerchoose_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateVote::set_playerchoose(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playerchoose_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.playerChoose)
}
inline void CreateVote::set_playerchoose(int index, const char* value, size_t size) {
  playerchoose_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.playerChoose)
}
inline ::std::string* CreateVote::add_playerchoose() {
  // @@protoc_insertion_point(field_add_mutable:protoMsg.CreateVote.playerChoose)
  return playerchoose_.Add();
}
inline void CreateVote::add_playerchoose(const ::std::string& value) {
  playerchoose_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.playerChoose)
}
#if LANG_CXX11
inline void CreateVote::add_playerchoose(::std::string&& value) {
  playerchoose_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protoMsg.CreateVote.playerChoose)
}
#endif
inline void CreateVote::add_playerchoose(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  playerchoose_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protoMsg.CreateVote.playerChoose)
}
inline void CreateVote::add_playerchoose(const char* value, size_t size) {
  playerchoose_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protoMsg.CreateVote.playerChoose)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateVote::playerchoose() const {
  // @@protoc_insertion_point(field_list:protoMsg.CreateVote.playerChoose)
  return playerchoose_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateVote::mutable_playerchoose() {
  // @@protoc_insertion_point(field_mutable_list:protoMsg.CreateVote.playerChoose)
  return &playerchoose_;
}

// string deadline = 7;
inline void CreateVote::clear_deadline() {
  deadline_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateVote::deadline() const {
  // @@protoc_insertion_point(field_get:protoMsg.CreateVote.deadline)
  return deadline_.GetNoArena();
}
inline void CreateVote::set_deadline(const ::std::string& value) {
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protoMsg.CreateVote.deadline)
}
#if LANG_CXX11
inline void CreateVote::set_deadline(::std::string&& value) {
  
  deadline_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protoMsg.CreateVote.deadline)
}
#endif
inline void CreateVote::set_deadline(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protoMsg.CreateVote.deadline)
}
inline void CreateVote::set_deadline(const char* value, size_t size) {
  
  deadline_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protoMsg.CreateVote.deadline)
}
inline ::std::string* CreateVote::mutable_deadline() {
  
  // @@protoc_insertion_point(field_mutable:protoMsg.CreateVote.deadline)
  return deadline_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateVote::release_deadline() {
  // @@protoc_insertion_point(field_release:protoMsg.CreateVote.deadline)
  
  return deadline_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateVote::set_allocated_deadline(::std::string* deadline) {
  if (deadline != NULL) {
    
  } else {
    
  }
  deadline_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deadline);
  // @@protoc_insertion_point(field_set_allocated:protoMsg.CreateVote.deadline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_createVote_2eproto
